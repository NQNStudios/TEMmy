* TEMmy

	TEMmy is an interactive electron microscope tutorial written using literate programming.
	
** Dependencies
	 
	 Most of the dependencies are included in this repository to keep their versions static.

	 You do need to install some of them separately: 

	 - Emacs (with the s string package installed), for compiling this file into a static website.
	 - Mono for running inklecate.exe

	 Parts of the build process are scripted in Bash, so building on Windows is not supported.

*** Inkjs

		Inkjs is a re-implementation of [[http:www.inklestudios.com/ink/][Ink]], a scripting language for making choice-based games. The important parts of TEMmy are written in Ink because it is a simple language, and anyone should be able to update TEMmy's Ink logic by following this guide: [[http:github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md][Writing With Ink]].

		The Inkjs source code is governed by the MIT License, and its license file is included in the boilerplate directory.

*** Ink

		TEMmy is built using Inklecate, the official Ink compiler. Ink is governed by the MIT License, and its license file is included in the inklecate directory.


** Source code
*** HTML

		Inkjs can run on a static HTML website. The HTML for TEMmy lives in [[file+emacs:index.html][index.html]] (which is a modified version of an Inkjs template file).

*** JavaScript

		TEMmy uses some JavaScript functions to manipulate the DOM (for instance, to display images for the tutorial. These functions are defined in the following source block:

		#+begin_src js :tangle temmy.js
			function showImage(file) {
					var elem = document.createElement("img");
					elem.setAttribute("src", "images/" + file);
					document.getElementById("story").appendChild(elem);
			}

			// This function will be called by main.js
			function setupStory(story) {
				story.BindExternalFunction("showImage", showImage);
			}
		#+end_src
		
*** Ink

		The code blocks in this subtree contain *all* of TEMmy's internal logic for guiding a new electron microscope user. You should almost never have to edit anything outside this block.

**** Functions

		 #+begin_src ink :tangle temmy.ink
		 EXTERNAL showImage(file)
		 #+end_src

**** Variables

		 #+begin_src ink :tangle temmy.ink
	 
		 VAR current_density = 0
		
		 #+end_src

**** Protocol

		 #+begin_src ink :tangle temmy.ink
		 ~ showImage("temmy.png")
		 Welcome to TEMmy, the Electron Microscope tutor named after Toby Fox's adorable character from Undertale.
		 
		 -> first_time_ever

		 // This choice should only need to be made once, when TEMmy is opened on the computer corresponding to one of our two TEMs.
		 == first_time_ever
		 
		 First of all, which electron microscope are you using?

		 * TEM1
		 	// Set TEM1-specific variables
		 	~ current_density = 250
		 * TEM2
		  // Set TEM2-specific variables
		 	~ current_density = 65
		 - Great. Eventually you will want a current density of {current_density}

	 
		#+end_src

** Build

	 To build TEMmy, simply execute the following block. It will create a directory called temmy which you can upload wherever you want to host TEMmy.

	 #+begin_src emacs-lisp
		 ;; Make sure there is no existing TEMmy build
		 (shell-command "if [ -d temmy ]; then rm -rf temmy; fi")
		 ;; Generate the Ink file
		 (org-babel-tangle)
		 ;; Compile the ink file
		 (shell-command "mono inklecate/inklecate.exe temmy.ink")

		 ;; Make the static site
		 (shell-command "cp -r boilerplate temmy")
		 (let ((storyjs
						(concat "var storyContent = "
										(with-temp-buffer (insert-file-contents "temmy.ink.json") (buffer-string))
										";")))
			 (save-excursion (find-file "temmy/story.js")
											 (insert storyjs)
											 (save-buffer)))
		 (copy-file "index.html" "temmy/")
		 (copy-directory "images" "temmy/")
		 (rename-file "temmy.js" "temmy/")
		 
		 ;; Clean up
		 (shell-command "rm temmy.ink")
		 (shell-command "rm temmy.ink.json")
		 ;; Share with Windows partition
		 (shell-command "sudo cp -r temmy /mnt/arch-share/")
	 #+end_src

	 #+RESULTS:
	 : 0


	 
	 
	 
	 
	 

